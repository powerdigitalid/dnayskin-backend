// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Banner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text_header String?
  text_desc   String?
  image_path  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  username    String        @unique
  password    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  order       Order[]
  reservation Reservation[]
}

model Customer {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  cust_name    String
  cust_phone   String
  cust_address String
  cust_img     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  order        Order[]
  reservation  Reservation[]
}

model Treatment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  treatment_name  String
  treatment_price Int
  treatment_img   String
  treatment_desc  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  product_name  String
  product_price Int
  product_img   String
  product_desc  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Reservation {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  reservation_date   DateTime
  reservation_time   String
  reservation_note   String
  reservation_status String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @db.ObjectId
  customer           Customer @relation(fields: [customerId], references: [id])
  customerId         String   @db.ObjectId
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  order_detail  OrderDetail[]
  order_date    DateTime
  order_desc    String
  order_total   Int
  order_payment String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.ObjectId
  customer      Customer      @relation(fields: [customerId], references: [id])
  customerId    String        @db.ObjectId
}

type OrderDetail {
  orderId     String? @db.ObjectId
  treatmentId String? @db.ObjectId
  productId   String? @db.ObjectId
  quantity    Int
  price       Int
}
